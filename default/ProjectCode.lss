
ProjectCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000868  000008fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800202  00800202  000008fe  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000217  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002df  00000000  00000000  00000b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000116  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b5  00000000  00000000  00000f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025b  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_5>
  18:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_6>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_45>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_51>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e6       	ldi	r30, 0x68	; 104
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 31       	cpi	r26, 0x1C	; 28
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <main>
 122:	0c 94 32 04 	jmp	0x864	; 0x864 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <motion_pin_config>:
unsigned char data;																//to store received data from UDR1
unsigned char incomingByte;	
int packet_cnt=0,packet_len=4;
char d[4]; 
void motion_pin_config (void)
{
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
 132:	a1 e2       	ldi	r26, 0x21	; 33
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e1 e2       	ldi	r30, 0x21	; 33
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8f 60       	ori	r24, 0x0F	; 15
 13e:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
 140:	a2 e2       	ldi	r26, 0x22	; 34
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e2 e2       	ldi	r30, 0x22	; 34
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;															//Setting PL3 and PL4 pins as output for PWM generation
 14e:	aa e0       	ldi	r26, 0x0A	; 10
 150:	b1 e0       	ldi	r27, 0x01	; 1
 152:	ea e0       	ldi	r30, 0x0A	; 10
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	80 81       	ld	r24, Z
 158:	88 61       	ori	r24, 0x18	; 24
 15a:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18;															//PL3 and PL4 pins are for velocity control using PWM.
 15c:	ab e0       	ldi	r26, 0x0B	; 11
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	eb e0       	ldi	r30, 0x0B	; 11
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	80 81       	ld	r24, Z
 166:	88 61       	ori	r24, 0x18	; 24
 168:	8c 93       	st	X, r24
}
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	08 95       	ret

00000170 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	 DDRE  = DDRE & 0xEF;															//Set the direction of the PORTE 4 pin as input
 178:	ad e2       	ldi	r26, 0x2D	; 45
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ed e2       	ldi	r30, 0x2D	; 45
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8f 7e       	andi	r24, 0xEF	; 239
 184:	8c 93       	st	X, r24
	 PORTE = PORTE | 0x10;															//Enable internal pull-up for PORTE 4 pin
 186:	ae e2       	ldi	r26, 0x2E	; 46
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	ee e2       	ldi	r30, 0x2E	; 46
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8c 93       	st	X, r24
}
 194:	cf 91       	pop	r28
 196:	df 91       	pop	r29
 198:	08 95       	ret

0000019a <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 19a:	df 93       	push	r29
 19c:	cf 93       	push	r28
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	 DDRE  = DDRE & 0xDF;															//Set the direction of the PORTE 4 pin as input
 1a2:	ad e2       	ldi	r26, 0x2D	; 45
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	ed e2       	ldi	r30, 0x2D	; 45
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8f 7d       	andi	r24, 0xDF	; 223
 1ae:	8c 93       	st	X, r24
	 PORTE = PORTE | 0x20;															//Enable internal pull-up for PORTE 4 pin
 1b0:	ae e2       	ldi	r26, 0x2E	; 46
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	ee e2       	ldi	r30, 0x2E	; 46
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	8c 93       	st	X, r24
}
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	08 95       	ret

000001c4 <port_init>:

//Function to initialize ports
void port_init()
{
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
 1cc:	0e 94 95 00 	call	0x12a	; 0x12a <motion_pin_config>
	left_encoder_pin_config();														//left encoder pin config
 1d0:	0e 94 b8 00 	call	0x170	; 0x170 <left_encoder_pin_config>
    right_encoder_pin_config();													//right encoder pin config	
 1d4:	0e 94 cd 00 	call	0x19a	; 0x19a <right_encoder_pin_config>

}
 1d8:	cf 91       	pop	r28
 1da:	df 91       	pop	r29
 1dc:	08 95       	ret

000001de <left_position_encoder_interrupt_init>:

// Function to enable Interrupt 4
void left_position_encoder_interrupt_init (void) 
{
 1de:	df 93       	push	r29
 1e0:	cf 93       	push	r28
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	 cli();																			// Clears the global interrupt
 1e6:	f8 94       	cli
	 EICRB = EICRB | 0x02;															// INT4 is set to trigger with falling edge
 1e8:	aa e6       	ldi	r26, 0x6A	; 106
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	ea e6       	ldi	r30, 0x6A	; 106
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	8c 93       	st	X, r24
	 EIMSK = EIMSK | 0x10;															// Enable Interrupt INT4 for left position encoder
 1f6:	ad e3       	ldi	r26, 0x3D	; 61
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	ed e3       	ldi	r30, 0x3D	; 61
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	80 61       	ori	r24, 0x10	; 16
 202:	8c 93       	st	X, r24
	 sei();																			// Enables the global interrupt 
 204:	78 94       	sei
}
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <right_position_encoder_interrupt_init>:

// Function to enable Interrupt 5
void right_position_encoder_interrupt_init (void) 
{
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
	 cli();																			// Clears the global interrupt
 214:	f8 94       	cli
	 EICRB = EICRB | 0x08;															// INT5 is set to trigger with falling edge
 216:	aa e6       	ldi	r26, 0x6A	; 106
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	ea e6       	ldi	r30, 0x6A	; 106
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	88 60       	ori	r24, 0x08	; 8
 222:	8c 93       	st	X, r24
	 EIMSK = EIMSK | 0x20;															// Enable Interrupt INT5 for right position encoder
 224:	ad e3       	ldi	r26, 0x3D	; 61
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	ed e3       	ldi	r30, 0x3D	; 61
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 62       	ori	r24, 0x20	; 32
 230:	8c 93       	st	X, r24
	 sei();																			// Enables the global interrupt 
 232:	78 94       	sei
}
 234:	cf 91       	pop	r28
 236:	df 91       	pop	r29
 238:	08 95       	ret

0000023a <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
 23a:	df 93       	push	r29
 23c:	cf 93       	push	r28
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
 242:	e1 e2       	ldi	r30, 0x21	; 33
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 248:	e5 e2       	ldi	r30, 0x25	; 37
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 250:	e4 e2       	ldi	r30, 0x24	; 36
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 258:	e9 e2       	ldi	r30, 0x29	; 41
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 25e:	e8 e2       	ldi	r30, 0x28	; 40
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 266:	eb e2       	ldi	r30, 0x2B	; 43
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 26c:	ea e2       	ldi	r30, 0x2A	; 42
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 274:	ed e2       	ldi	r30, 0x2D	; 45
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 27a:	ec e2       	ldi	r30, 0x2C	; 44
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 282:	e0 e2       	ldi	r30, 0x20	; 32
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	89 ea       	ldi	r24, 0xA9	; 169
 288:	80 83       	st	Z, r24
 																						For Overriding normal port functionality to OCRnA outputs.
				  																		{WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 28a:	e1 e2       	ldi	r30, 0x21	; 33
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	8b e0       	ldi	r24, 0x0B	; 11
 290:	80 83       	st	Z, r24
}
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	08 95       	ret

00000298 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	0f 92       	push	r0
 29e:	0f 92       	push	r0
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
 2a8:	e8 e2       	ldi	r30, 0x28	; 40
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
 2b0:	ea e2       	ldi	r30, 0x2A	; 42
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	80 83       	st	Z, r24
}
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	cf 91       	pop	r28
 2be:	df 91       	pop	r29
 2c0:	08 95       	ret

000002c2 <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 2c2:	df 93       	push	r29
 2c4:	cf 93       	push	r28
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00;																	//disable while setting baud rate
 2ca:	e1 ed       	ldi	r30, 0xD1	; 209
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	10 82       	st	Z, r1
 UCSR2A = 0x00;
 2d0:	e0 ed       	ldi	r30, 0xD0	; 208
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	10 82       	st	Z, r1
 UCSR2C = 0x06;
 2d6:	e2 ed       	ldi	r30, 0xD2	; 210
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	80 83       	st	Z, r24
 UBRR2L = 0x5F;																	//set baud rate lo
 2de:	e4 ed       	ldi	r30, 0xD4	; 212
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	8f e5       	ldi	r24, 0x5F	; 95
 2e4:	80 83       	st	Z, r24
 UBRR2H = 0x00;																	//set baud rate hi
 2e6:	e5 ed       	ldi	r30, 0xD5	; 213
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	10 82       	st	Z, r1
 UCSR2B = 0x98;
 2ec:	e1 ed       	ldi	r30, 0xD1	; 209
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	88 e9       	ldi	r24, 0x98	; 152
 2f2:	80 83       	st	Z, r24
}
 2f4:	cf 91       	pop	r28
 2f6:	df 91       	pop	r29
 2f8:	08 95       	ret

000002fa <__vector_51>:


ISR(USART2_RX_vect)																// ISR for receive complete interrupt
{	/*********************************************************************************
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	00 90 5b 00 	lds	r0, 0x005B
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
	We will take four bytes of data at a time ,t,he first is an escape character 0x7E.
	This is followed by a direction character 8,6,2,4,5 for F,R,L,B,Stop respectively.
	Final two bytes indicating the PWM input to each motor.
	*********************************************************************************/
	incomingByte = UDR2; 
 32a:	e6 ed       	ldi	r30, 0xD6	; 214
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 93 16 02 	sts	0x0216, r24
	d[packet_cnt]=incomingByte;
 334:	80 91 14 02 	lds	r24, 0x0214
 338:	90 91 15 02 	lds	r25, 0x0215
 33c:	20 91 16 02 	lds	r18, 0x0216
 340:	fc 01       	movw	r30, r24
 342:	e8 5e       	subi	r30, 0xE8	; 232
 344:	fd 4f       	sbci	r31, 0xFD	; 253
 346:	20 83       	st	Z, r18
	//UDR2=incomingByte;
	packet_cnt++;
 348:	80 91 14 02 	lds	r24, 0x0214
 34c:	90 91 15 02 	lds	r25, 0x0215
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 15 02 	sts	0x0215, r25
 356:	80 93 14 02 	sts	0x0214, r24
	if (d[0]!='A')
 35a:	80 91 18 02 	lds	r24, 0x0218
 35e:	81 34       	cpi	r24, 0x41	; 65
 360:	21 f0       	breq	.+8      	; 0x36a <__vector_51+0x70>
	packet_cnt=0; 
 362:	10 92 15 02 	sts	0x0215, r1
 366:	10 92 14 02 	sts	0x0214, r1
	//UDR2=packet_cnt;
	if( packet_cnt>=packet_len && d[0]=='A')
 36a:	20 91 14 02 	lds	r18, 0x0214
 36e:	30 91 15 02 	lds	r19, 0x0215
 372:	80 91 00 02 	lds	r24, 0x0200
 376:	90 91 01 02 	lds	r25, 0x0201
 37a:	28 17       	cp	r18, r24
 37c:	39 07       	cpc	r19, r25
 37e:	0c f4       	brge	.+2      	; 0x382 <__vector_51+0x88>
 380:	4b c0       	rjmp	.+150    	; 0x418 <__vector_51+0x11e>
 382:	80 91 18 02 	lds	r24, 0x0218
 386:	81 34       	cpi	r24, 0x41	; 65
 388:	09 f0       	breq	.+2      	; 0x38c <__vector_51+0x92>
 38a:	46 c0       	rjmp	.+140    	; 0x418 <__vector_51+0x11e>
	{
		packet_cnt=0;	
 38c:	10 92 15 02 	sts	0x0215, r1
 390:	10 92 14 02 	sts	0x0214, r1
		velocity((int)d[2],(int)d[3]);													  
 394:	80 91 1a 02 	lds	r24, 0x021A
 398:	90 91 1b 02 	lds	r25, 0x021B
 39c:	69 2f       	mov	r22, r25
 39e:	0e 94 4c 01 	call	0x298	; 0x298 <velocity>
		if(d[1] == 0x38)														//ASCII value of 8
 3a2:	80 91 19 02 	lds	r24, 0x0219
 3a6:	88 33       	cpi	r24, 0x38	; 56
 3a8:	51 f4       	brne	.+20     	; 0x3be <__vector_51+0xc4>
		{
			PORTA=0x06;															//forward
 3aa:	e2 e2       	ldi	r30, 0x22	; 34
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	80 83       	st	Z, r24
			//Both wheels move forward
			FBL_Flag=1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 03 02 	sts	0x0203, r24
			FBR_Flag=1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 02 02 	sts	0x0202, r24
		}

		if(d[1] == 0x32)														//ASCII value of 2
 3be:	80 91 19 02 	lds	r24, 0x0219
 3c2:	82 33       	cpi	r24, 0x32	; 50
 3c4:	41 f4       	brne	.+16     	; 0x3d6 <__vector_51+0xdc>
		{
			PORTA=0x09;															//back
 3c6:	e2 e2       	ldi	r30, 0x22	; 34
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	89 e0       	ldi	r24, 0x09	; 9
 3cc:	80 83       	st	Z, r24
			//Both wheels move back.
			FBL_Flag=0;
 3ce:	10 92 03 02 	sts	0x0203, r1
			FBR_Flag=0;
 3d2:	10 92 02 02 	sts	0x0202, r1
		}

		if(d[1] == 0x34)														//ASCII value of 4
 3d6:	80 91 19 02 	lds	r24, 0x0219
 3da:	84 33       	cpi	r24, 0x34	; 52
 3dc:	49 f4       	brne	.+18     	; 0x3f0 <__vector_51+0xf6>
		{
			PORTA=0x05;															//left
 3de:	e2 e2       	ldi	r30, 0x22	; 34
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	80 83       	st	Z, r24
			//Right wheel should move with forward and LEft backward for perfect left turn.
			FBL_Flag=0;
 3e6:	10 92 03 02 	sts	0x0203, r1
			FBR_Flag=1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	80 93 02 02 	sts	0x0202, r24
		}

		if(d[1] == 0x36)														//ASCII value of 6
 3f0:	80 91 19 02 	lds	r24, 0x0219
 3f4:	86 33       	cpi	r24, 0x36	; 54
 3f6:	49 f4       	brne	.+18     	; 0x40a <__vector_51+0x110>
		{
			PORTA=0x0A;															//right
 3f8:	e2 e2       	ldi	r30, 0x22	; 34
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	8a e0       	ldi	r24, 0x0A	; 10
 3fe:	80 83       	st	Z, r24
			//Left wheel should move with forward and right backward for perfect right turn..
			FBL_Flag=1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 03 02 	sts	0x0203, r24
			FBR_Flag=0;
 406:	10 92 02 02 	sts	0x0202, r1
		}

		if(d[1] == 0x35)														//ASCII value of 5
 40a:	80 91 19 02 	lds	r24, 0x0219
 40e:	85 33       	cpi	r24, 0x35	; 53
 410:	19 f4       	brne	.+6      	; 0x418 <__vector_51+0x11e>
		{
			PORTA=0x00;															//stop
 412:	e2 e2       	ldi	r30, 0x22	; 34
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	10 82       	st	Z, r1
		}
	}

}
 418:	cf 91       	pop	r28
 41a:	df 91       	pop	r29
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	00 92 5b 00 	sts	0x005B, r0
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <timer4_init>:
//Interrupt which runs every 100 ms. We use this to send data of the current encoder position.

void timer4_init(void)
{
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 TCCR4B = 0x00; //stop
 44c:	e1 ea       	ldi	r30, 0xA1	; 161
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	10 82       	st	Z, r1
 TCNT4H = 0xF7; //247 //Counter higher 8 bit value
 452:	e5 ea       	ldi	r30, 0xA5	; 165
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	87 ef       	ldi	r24, 0xF7	; 247
 458:	80 83       	st	Z, r24
 TCNT4L = 0x00; //0+247*256 = 63232 to reach 65535 we need 2303 counts.
 45a:	e4 ea       	ldi	r30, 0xA4	; 164
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	10 82       	st	Z, r1
 OCR4AH = 0x00; //Output Compair Register (OCR)- Not used Since TIMSK=0x01 we only use the overflow counter.
 460:	e9 ea       	ldi	r30, 0xA9	; 169
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	10 82       	st	Z, r1
 OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
 466:	e8 ea       	ldi	r30, 0xA8	; 168
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	10 82       	st	Z, r1
 OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
 46c:	eb ea       	ldi	r30, 0xAB	; 171
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	10 82       	st	Z, r1
 OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
 472:	ea ea       	ldi	r30, 0xAA	; 170
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	10 82       	st	Z, r1
 OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
 478:	ed ea       	ldi	r30, 0xAD	; 173
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	10 82       	st	Z, r1
 OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
 47e:	ec ea       	ldi	r30, 0xAC	; 172
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	10 82       	st	Z, r1
 ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
 484:	e7 ea       	ldi	r30, 0xA7	; 167
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	10 82       	st	Z, r1
 ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
 48a:	e6 ea       	ldi	r30, 0xA6	; 166
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	10 82       	st	Z, r1
 TCCR4A = 0x00; //This ensures normal mode as WGM0,1 are both 0. In addition WGM2 in in TCCR4B (in the 4th bit from right) is also 0
 490:	e0 ea       	ldi	r30, 0xA0	; 160
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	10 82       	st	Z, r1
 TCCR4C = 0x00; //Just set to zero for now.
 496:	e2 ea       	ldi	r30, 0xA2	; 162
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	10 82       	st	Z, r1
 TCCR4B = 0x04; //start Timer 0x04. Prescaler is 64 for CS0:2 set to 011. 14745600/64=230400  
 49c:	e1 ea       	ldi	r30, 0xA1	; 161
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	84 e0       	ldi	r24, 0x04	; 4
 4a2:	80 83       	st	Z, r24
}
 4a4:	cf 91       	pop	r28
 4a6:	df 91       	pop	r29
 4a8:	08 95       	ret

000004aa <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 cli();																			//Clears the global interrupts
 4b2:	f8 94       	cli
 port_init();																	//Initializes all the ports
 4b4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <port_init>
 uart2_init();
 4b8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart2_init>
 timer5_init();
 4bc:	0e 94 1d 01 	call	0x23a	; 0x23a <timer5_init>
 timer4_init();
 4c0:	0e 94 22 02 	call	0x444	; 0x444 <timer4_init>
 TIMSK4 = 0x01;    //Enables the overflow interrupt.
 4c4:	e2 e7       	ldi	r30, 0x72	; 114
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 83       	st	Z, r24
 left_position_encoder_interrupt_init();
 4cc:	0e 94 ef 00 	call	0x1de	; 0x1de <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
 4d0:	0e 94 06 01 	call	0x20c	; 0x20c <right_position_encoder_interrupt_init>
 																				//Initailize UART1 for serial communiaction
 sei();																			//Enables the global interrupts
 4d4:	78 94       	sei
}
 4d6:	cf 91       	pop	r28
 4d8:	df 91       	pop	r29
 4da:	08 95       	ret

000004dc <USART_Transmit>:

//If this doesn't work then an interrupt can also be used. Refer page 106 of Software Manual
void USART_Transmit( unsigned char data )										
{
 4dc:	df 93       	push	r29
 4de:	cf 93       	push	r28
 4e0:	0f 92       	push	r0
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	89 83       	std	Y+1, r24	; 0x01
/* Wait for empty transmit buffer*/
while( !( UCSR2A & (1<<UDRE2)) )
 4e8:	e0 ed       	ldi	r30, 0xD0	; 208
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	88 2f       	mov	r24, r24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	80 72       	andi	r24, 0x20	; 32
 4f4:	90 70       	andi	r25, 0x00	; 0
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	b9 f3       	breq	.-18     	; 0x4e8 <USART_Transmit+0xc>
;
/* Put data into buffer, sends the data*/
UDR2 = data;
 4fa:	e6 ed       	ldi	r30, 0xD6	; 214
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	80 83       	st	Z, r24
}
 502:	0f 90       	pop	r0
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <__vector_45>:


ISR(TIMER4_OVF_vect)
{
 50a:	1f 92       	push	r1
 50c:	0f 92       	push	r0
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	0f 92       	push	r0
 512:	00 90 5b 00 	lds	r0, 0x005B
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	1f 93       	push	r17
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
 534:	df 93       	push	r29
 536:	cf 93       	push	r28
 538:	0f 92       	push	r0
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
char chksum;
TCCR4B = 0x00;			//Stops clock.
 53e:	e1 ea       	ldi	r30, 0xA1	; 161
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	10 82       	st	Z, r1
/*Apparently gives 0.2s gap or 5Hz. Should have been 20Hz */
//TCNT4H = 0xD2; 		//210 
//TCNT4L = 0xFF; 		//255+210*256 = 54015 to reach 65535 we need 11520 counts.

/*Apparently gives 0.04s gap 25Hz. Should have been 100Hz*/
TCNT4H = 0xF7; 			//247 
 544:	e5 ea       	ldi	r30, 0xA5	; 165
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	87 ef       	ldi	r24, 0xF7	; 247
 54a:	80 83       	st	Z, r24
TCNT4L = 0x00; 			//0+247*256 = 63232 to reach 65535 we need 2303 counts.
 54c:	e4 ea       	ldi	r30, 0xA4	; 164
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	10 82       	st	Z, r1

/*Apparently gives 0.01s gap. But random stuff creep in so we will keep 25Hz*/
//TCNT4H = 0xFD; 			//253 
//TCNT4L = 0xBF; 			//191+253*256 = 64959 to reach 65535 we need 577 counts.

TCCR4B =  0x04;			// Restarts clock with 64 prescaler
 552:	e1 ea       	ldi	r30, 0xA1	; 161
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	80 83       	st	Z, r24

//Here we just need to send the encoder positions. 

USART_Transmit('A');					//'A' denotes the start of the sequence of data to be sent.
 55a:	81 e4       	ldi	r24, 0x41	; 65
 55c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <USART_Transmit>
USART_Transmit(ShaftCountRight/256);	//Sending the 4 bytes of encoder data.
 560:	80 91 0c 02 	lds	r24, 0x020C
 564:	90 91 0d 02 	lds	r25, 0x020D
 568:	a0 91 0e 02 	lds	r26, 0x020E
 56c:	b0 91 0f 02 	lds	r27, 0x020F
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	31 e0       	ldi	r19, 0x01	; 1
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	bc 01       	movw	r22, r24
 57a:	cd 01       	movw	r24, r26
 57c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divmodsi4>
 580:	da 01       	movw	r26, r20
 582:	c9 01       	movw	r24, r18
 584:	0e 94 6e 02 	call	0x4dc	; 0x4dc <USART_Transmit>
USART_Transmit(ShaftCountRight%256);
 588:	80 91 0c 02 	lds	r24, 0x020C
 58c:	90 91 0d 02 	lds	r25, 0x020D
 590:	a0 91 0e 02 	lds	r26, 0x020E
 594:	b0 91 0f 02 	lds	r27, 0x020F
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	31 e0       	ldi	r19, 0x01	; 1
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	bc 01       	movw	r22, r24
 5a2:	cd 01       	movw	r24, r26
 5a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divmodsi4>
 5a8:	dc 01       	movw	r26, r24
 5aa:	cb 01       	movw	r24, r22
 5ac:	0e 94 6e 02 	call	0x4dc	; 0x4dc <USART_Transmit>
USART_Transmit(ShaftCountLeft/256);
 5b0:	80 91 04 02 	lds	r24, 0x0204
 5b4:	90 91 05 02 	lds	r25, 0x0205
 5b8:	a0 91 06 02 	lds	r26, 0x0206
 5bc:	b0 91 07 02 	lds	r27, 0x0207
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	31 e0       	ldi	r19, 0x01	; 1
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	bc 01       	movw	r22, r24
 5ca:	cd 01       	movw	r24, r26
 5cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divmodsi4>
 5d0:	da 01       	movw	r26, r20
 5d2:	c9 01       	movw	r24, r18
 5d4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <USART_Transmit>
USART_Transmit(ShaftCountLeft%256);
 5d8:	80 91 04 02 	lds	r24, 0x0204
 5dc:	90 91 05 02 	lds	r25, 0x0205
 5e0:	a0 91 06 02 	lds	r26, 0x0206
 5e4:	b0 91 07 02 	lds	r27, 0x0207
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	31 e0       	ldi	r19, 0x01	; 1
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	bc 01       	movw	r22, r24
 5f2:	cd 01       	movw	r24, r26
 5f4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divmodsi4>
 5f8:	dc 01       	movw	r26, r24
 5fa:	cb 01       	movw	r24, r22
 5fc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <USART_Transmit>

chksum=ShaftCountRight/256+ShaftCountRight%256+ShaftCountLeft/256+ShaftCountLeft%256; 
 600:	80 91 0c 02 	lds	r24, 0x020C
 604:	90 91 0d 02 	lds	r25, 0x020D
 608:	a0 91 0e 02 	lds	r26, 0x020E
 60c:	b0 91 0f 02 	lds	r27, 0x020F
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	bc 01       	movw	r22, r24
 61a:	cd 01       	movw	r24, r26
 61c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divmodsi4>
 620:	da 01       	movw	r26, r20
 622:	c9 01       	movw	r24, r18
 624:	18 2f       	mov	r17, r24
 626:	80 91 0c 02 	lds	r24, 0x020C
 62a:	90 91 0d 02 	lds	r25, 0x020D
 62e:	a0 91 0e 02 	lds	r26, 0x020E
 632:	b0 91 0f 02 	lds	r27, 0x020F
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	31 e0       	ldi	r19, 0x01	; 1
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	bc 01       	movw	r22, r24
 640:	cd 01       	movw	r24, r26
 642:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divmodsi4>
 646:	dc 01       	movw	r26, r24
 648:	cb 01       	movw	r24, r22
 64a:	18 0f       	add	r17, r24
 64c:	80 91 04 02 	lds	r24, 0x0204
 650:	90 91 05 02 	lds	r25, 0x0205
 654:	a0 91 06 02 	lds	r26, 0x0206
 658:	b0 91 07 02 	lds	r27, 0x0207
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	31 e0       	ldi	r19, 0x01	; 1
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	bc 01       	movw	r22, r24
 666:	cd 01       	movw	r24, r26
 668:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divmodsi4>
 66c:	da 01       	movw	r26, r20
 66e:	c9 01       	movw	r24, r18
 670:	18 0f       	add	r17, r24
 672:	80 91 04 02 	lds	r24, 0x0204
 676:	90 91 05 02 	lds	r25, 0x0205
 67a:	a0 91 06 02 	lds	r26, 0x0206
 67e:	b0 91 07 02 	lds	r27, 0x0207
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	31 e0       	ldi	r19, 0x01	; 1
 686:	40 e0       	ldi	r20, 0x00	; 0
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	bc 01       	movw	r22, r24
 68c:	cd 01       	movw	r24, r26
 68e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divmodsi4>
 692:	dc 01       	movw	r26, r24
 694:	cb 01       	movw	r24, r22
 696:	81 0f       	add	r24, r17
 698:	89 83       	std	Y+1, r24	; 0x01
USART_Transmit(chksum);					//Send the calculated checksum for comparison and accuracy check.
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <USART_Transmit>
}
 6a0:	0f 90       	pop	r0
 6a2:	cf 91       	pop	r28
 6a4:	df 91       	pop	r29
 6a6:	ff 91       	pop	r31
 6a8:	ef 91       	pop	r30
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	1f 91       	pop	r17
 6c0:	0f 90       	pop	r0
 6c2:	00 92 5b 00 	sts	0x005B, r0
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <__vector_6>:
**************************************************************************************************/


//ISR for right position encoder
ISR(INT5_vect)  
{
 6d0:	1f 92       	push	r1
 6d2:	0f 92       	push	r0
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	0f 92       	push	r0
 6d8:	11 24       	eor	r1, r1
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
 6e2:	df 93       	push	r29
 6e4:	cf 93       	push	r28
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
	if(FBR_Flag == 1)
 6ea:	80 91 02 02 	lds	r24, 0x0202
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	a1 f4       	brne	.+40     	; 0x71a <__vector_6+0x4a>
	ShaftCountRight++;																//increment right shaft position count for forward motion
 6f2:	80 91 0c 02 	lds	r24, 0x020C
 6f6:	90 91 0d 02 	lds	r25, 0x020D
 6fa:	a0 91 0e 02 	lds	r26, 0x020E
 6fe:	b0 91 0f 02 	lds	r27, 0x020F
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	a1 1d       	adc	r26, r1
 706:	b1 1d       	adc	r27, r1
 708:	80 93 0c 02 	sts	0x020C, r24
 70c:	90 93 0d 02 	sts	0x020D, r25
 710:	a0 93 0e 02 	sts	0x020E, r26
 714:	b0 93 0f 02 	sts	0x020F, r27
 718:	13 c0       	rjmp	.+38     	; 0x740 <__vector_6+0x70>
	else
	ShaftCountRight--;
 71a:	80 91 0c 02 	lds	r24, 0x020C
 71e:	90 91 0d 02 	lds	r25, 0x020D
 722:	a0 91 0e 02 	lds	r26, 0x020E
 726:	b0 91 0f 02 	lds	r27, 0x020F
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	a1 09       	sbc	r26, r1
 72e:	b1 09       	sbc	r27, r1
 730:	80 93 0c 02 	sts	0x020C, r24
 734:	90 93 0d 02 	sts	0x020D, r25
 738:	a0 93 0e 02 	sts	0x020E, r26
 73c:	b0 93 0f 02 	sts	0x020F, r27
}
 740:	cf 91       	pop	r28
 742:	df 91       	pop	r29
 744:	bf 91       	pop	r27
 746:	af 91       	pop	r26
 748:	9f 91       	pop	r25
 74a:	8f 91       	pop	r24
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <__vector_5>:

//ISR for left position encoder
ISR(INT4_vect)
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	8f 93       	push	r24
 762:	9f 93       	push	r25
 764:	af 93       	push	r26
 766:	bf 93       	push	r27
 768:	df 93       	push	r29
 76a:	cf 93       	push	r28
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
	if(FBL_Flag == 1)
 770:	80 91 03 02 	lds	r24, 0x0203
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	a1 f4       	brne	.+40     	; 0x7a0 <__vector_5+0x4a>
	ShaftCountLeft++;																//increment left shaft position count for forward motion
 778:	80 91 04 02 	lds	r24, 0x0204
 77c:	90 91 05 02 	lds	r25, 0x0205
 780:	a0 91 06 02 	lds	r26, 0x0206
 784:	b0 91 07 02 	lds	r27, 0x0207
 788:	01 96       	adiw	r24, 0x01	; 1
 78a:	a1 1d       	adc	r26, r1
 78c:	b1 1d       	adc	r27, r1
 78e:	80 93 04 02 	sts	0x0204, r24
 792:	90 93 05 02 	sts	0x0205, r25
 796:	a0 93 06 02 	sts	0x0206, r26
 79a:	b0 93 07 02 	sts	0x0207, r27
 79e:	13 c0       	rjmp	.+38     	; 0x7c6 <__vector_5+0x70>
	else
	ShaftCountLeft--;																//decrement left shaft position count for backward motion			
 7a0:	80 91 04 02 	lds	r24, 0x0204
 7a4:	90 91 05 02 	lds	r25, 0x0205
 7a8:	a0 91 06 02 	lds	r26, 0x0206
 7ac:	b0 91 07 02 	lds	r27, 0x0207
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	a1 09       	sbc	r26, r1
 7b4:	b1 09       	sbc	r27, r1
 7b6:	80 93 04 02 	sts	0x0204, r24
 7ba:	90 93 05 02 	sts	0x0205, r25
 7be:	a0 93 06 02 	sts	0x0206, r26
 7c2:	b0 93 07 02 	sts	0x0207, r27
}
 7c6:	cf 91       	pop	r28
 7c8:	df 91       	pop	r29
 7ca:	bf 91       	pop	r27
 7cc:	af 91       	pop	r26
 7ce:	9f 91       	pop	r25
 7d0:	8f 91       	pop	r24
 7d2:	0f 90       	pop	r0
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	0f 90       	pop	r0
 7d8:	1f 90       	pop	r1
 7da:	18 95       	reti

000007dc <main>:

//Main Function
int main(void)
{
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 7e4:	0e 94 55 02 	call	0x4aa	; 0x4aa <init_devices>
 7e8:	ff cf       	rjmp	.-2      	; 0x7e8 <main+0xc>

000007ea <__divmodsi4>:
 7ea:	97 fb       	bst	r25, 7
 7ec:	09 2e       	mov	r0, r25
 7ee:	05 26       	eor	r0, r21
 7f0:	0e d0       	rcall	.+28     	; 0x80e <__divmodsi4_neg1>
 7f2:	57 fd       	sbrc	r21, 7
 7f4:	04 d0       	rcall	.+8      	; 0x7fe <__divmodsi4_neg2>
 7f6:	14 d0       	rcall	.+40     	; 0x820 <__udivmodsi4>
 7f8:	0a d0       	rcall	.+20     	; 0x80e <__divmodsi4_neg1>
 7fa:	00 1c       	adc	r0, r0
 7fc:	38 f4       	brcc	.+14     	; 0x80c <__divmodsi4_exit>

000007fe <__divmodsi4_neg2>:
 7fe:	50 95       	com	r21
 800:	40 95       	com	r20
 802:	30 95       	com	r19
 804:	21 95       	neg	r18
 806:	3f 4f       	sbci	r19, 0xFF	; 255
 808:	4f 4f       	sbci	r20, 0xFF	; 255
 80a:	5f 4f       	sbci	r21, 0xFF	; 255

0000080c <__divmodsi4_exit>:
 80c:	08 95       	ret

0000080e <__divmodsi4_neg1>:
 80e:	f6 f7       	brtc	.-4      	; 0x80c <__divmodsi4_exit>
 810:	90 95       	com	r25
 812:	80 95       	com	r24
 814:	70 95       	com	r23
 816:	61 95       	neg	r22
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	08 95       	ret

00000820 <__udivmodsi4>:
 820:	a1 e2       	ldi	r26, 0x21	; 33
 822:	1a 2e       	mov	r1, r26
 824:	aa 1b       	sub	r26, r26
 826:	bb 1b       	sub	r27, r27
 828:	fd 01       	movw	r30, r26
 82a:	0d c0       	rjmp	.+26     	; 0x846 <__udivmodsi4_ep>

0000082c <__udivmodsi4_loop>:
 82c:	aa 1f       	adc	r26, r26
 82e:	bb 1f       	adc	r27, r27
 830:	ee 1f       	adc	r30, r30
 832:	ff 1f       	adc	r31, r31
 834:	a2 17       	cp	r26, r18
 836:	b3 07       	cpc	r27, r19
 838:	e4 07       	cpc	r30, r20
 83a:	f5 07       	cpc	r31, r21
 83c:	20 f0       	brcs	.+8      	; 0x846 <__udivmodsi4_ep>
 83e:	a2 1b       	sub	r26, r18
 840:	b3 0b       	sbc	r27, r19
 842:	e4 0b       	sbc	r30, r20
 844:	f5 0b       	sbc	r31, r21

00000846 <__udivmodsi4_ep>:
 846:	66 1f       	adc	r22, r22
 848:	77 1f       	adc	r23, r23
 84a:	88 1f       	adc	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	1a 94       	dec	r1
 850:	69 f7       	brne	.-38     	; 0x82c <__udivmodsi4_loop>
 852:	60 95       	com	r22
 854:	70 95       	com	r23
 856:	80 95       	com	r24
 858:	90 95       	com	r25
 85a:	9b 01       	movw	r18, r22
 85c:	ac 01       	movw	r20, r24
 85e:	bd 01       	movw	r22, r26
 860:	cf 01       	movw	r24, r30
 862:	08 95       	ret

00000864 <_exit>:
 864:	f8 94       	cli

00000866 <__stop_program>:
 866:	ff cf       	rjmp	.-2      	; 0x866 <__stop_program>
